{
    type: "Program",
    sourceType: "script",
    body: [
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "jieqiUserInfo"
                    },
                    init: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiUserId"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiUserName"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: "",
                                    raw: "''"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiUserPassword"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: "",
                                    raw: "''"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiUserToken"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: "",
                                    raw: "''"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiUserGroup"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiUserHonorId"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiNewMessage"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiCodeLogin"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "jieqiCodePost"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            }
                        ]
                    }
                }
            ],
            kind: "var"
        },
        {
            type: "IfStatement",
            test: {
                type: "BinaryExpression",
                operator: ">=",
                left: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "document"
                            },
                            property: {
                                type: "Identifier",
                                name: "cookie"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "indexOf"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "jieqiUserInfo",
                            raw: "'jieqiUserInfo'"
                        }
                    ]
                },
                right: {
                    type: "Literal",
                    value: 0,
                    raw: "0"
                }
            },
            consequent: {
                type: "BlockStatement",
                body: [
                    {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "cinfo"
                                },
                                init: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "Cookie"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "get"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Literal",
                                            value: "jieqiUserInfo",
                                            raw: "'jieqiUserInfo'"
                                        }
                                    ]
                                }
                            }
                        ],
                        kind: "var"
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "AssignmentExpression",
                            operator: "=",
                            left: {
                                type: "Identifier",
                                name: "start"
                            },
                            right: {
                                type: "Literal",
                                value: 0,
                                raw: "0"
                            }
                        }
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "AssignmentExpression",
                            operator: "=",
                            left: {
                                type: "Identifier",
                                name: "offset"
                            },
                            right: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "cinfo"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "indexOf"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: ",",
                                        raw: "','"
                                    },
                                    {
                                        type: "Identifier",
                                        name: "start"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        type: "WhileStatement",
                        test: {
                            type: "BinaryExpression",
                            operator: ">",
                            left: {
                                type: "Identifier",
                                name: "offset"
                            },
                            right: {
                                type: "Literal",
                                value: 0,
                                raw: "0"
                            }
                        },
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "tmpval"
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "cinfo"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "substring"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "start"
                                                },
                                                {
                                                    type: "Identifier",
                                                    name: "offset"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "tmpidx"
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "tmpval"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "indexOf"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Literal",
                                                    value: "=",
                                                    raw: "'='"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    type: "IfStatement",
                                    test: {
                                        type: "BinaryExpression",
                                        operator: ">",
                                        left: {
                                            type: "Identifier",
                                            name: "tmpidx"
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 0,
                                            raw: "0"
                                        }
                                    },
                                    consequent: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "tmpname"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "tmpval"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "substring"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: 0,
                                                                raw: "0"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "tmpidx"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "tmpval"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "tmpval"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "substring"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "tmpidx"
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 1,
                                                                    raw: "1"
                                                                }
                                                            },
                                                            {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "tmpval"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "length"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "jieqiUserInfo"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "hasOwnProperty"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "tmpname"
                                                        }
                                                    ]
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: True,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "jieqiUserInfo"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "tmpname"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "tmpval"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "start"
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Identifier",
                                                name: "offset"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                                raw: "1"
                                            }
                                        }
                                    }
                                },
                                {
                                    type: "IfStatement",
                                    test: {
                                        type: "BinaryExpression",
                                        operator: "<",
                                        left: {
                                            type: "Identifier",
                                            name: "offset"
                                        },
                                        right: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "cinfo"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "length"
                                            }
                                        }
                                    },
                                    consequent: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "offset"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "cinfo"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "indexOf"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: ",",
                                                                raw: "','"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "start"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "==",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "offset"
                                                    },
                                                    right: {
                                                        type: "UnaryExpression",
                                                        prefix: True,
                                                        operator: "-",
                                                        argument: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "offset"
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "cinfo"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    alternate: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "offset"
                                                    },
                                                    right: {
                                                        type: "UnaryExpression",
                                                        prefix: True,
                                                        operator: "-",
                                                        argument: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "maxWidth"
                    },
                    init: {
                        type: "Literal",
                        value: 760,
                        raw: "760"
                    }
                }
            ],
            kind: "var"
        },
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "usePageMode"
                    },
                    init: {
                        type: "ConditionalExpression",
                        test: {
                            type: "LogicalExpression",
                            operator: "&&",
                            left: {
                                type: "LogicalExpression",
                                operator: "||",
                                left: {
                                    type: "LogicalExpression",
                                    operator: "||",
                                    left: {
                                        type: "LogicalExpression",
                                        operator: "||",
                                        left: {
                                            type: "LogicalExpression",
                                            operator: "||",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "in",
                                                left: {
                                                    type: "Literal",
                                                    value: "columnWidth",
                                                    raw: "'columnWidth'"
                                                },
                                                right: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "document"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "documentElement"
                                                        }
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "style"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: "BinaryExpression",
                                                operator: "in",
                                                left: {
                                                    type: "Literal",
                                                    value: "MozColumnWidth",
                                                    raw: "'MozColumnWidth'"
                                                },
                                                right: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "document"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "documentElement"
                                                        }
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "style"
                                                    }
                                                }
                                            }
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "in",
                                            left: {
                                                type: "Literal",
                                                value: "WebkitColumnWidth",
                                                raw: "'WebkitColumnWidth'"
                                            },
                                            right: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "document"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "documentElement"
                                                    }
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "style"
                                                }
                                            }
                                        }
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "in",
                                        left: {
                                            type: "Literal",
                                            value: "OColumnWidth",
                                            raw: "'OColumnWidth'"
                                        },
                                        right: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "document"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "documentElement"
                                                }
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "style"
                                            }
                                        }
                                    }
                                },
                                right: {
                                    type: "BinaryExpression",
                                    operator: "in",
                                    left: {
                                        type: "Literal",
                                        value: "msColumnWidth",
                                        raw: "'msColumnWidth'"
                                    },
                                    right: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "document"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "documentElement"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "style"
                                        }
                                    }
                                }
                            },
                            right: {
                                type: "BinaryExpression",
                                operator: ">",
                                left: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "jieqiUserInfo"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "jieqiUserHonorId"
                                    }
                                },
                                right: {
                                    type: "Literal",
                                    value: 2,
                                    raw: "2"
                                }
                            }
                        },
                        consequent: {
                            type: "Literal",
                            value: True,
                            raw: "true"
                        },
                        alternate: {
                            type: "Literal",
                            value: False,
                            raw: "false"
                        }
                    }
                }
            ],
            kind: "var"
        },
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "ReadTools"
                    },
                    init: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "defaultColorid"
                                },
                                computed: False,
                                value: {
                                    type: "LogicalExpression",
                                    operator: "||",
                                    left: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "parseInt"
                                        },
                                        arguments: [
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "Storage"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "get"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        type: "Literal",
                                                        value: "read_colorid",
                                                        raw: "'read_colorid'"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 0,
                                        raw: "0"
                                    }
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "bgcolor"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: "#f1f1f1",
                                            raw: "'#f1f1f1'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#232323",
                                            raw: "'#232323'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#ebe5d8",
                                            raw: "'#ebe5d8'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#dfd2ab",
                                            raw: "'#dfd2ab'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#d3e2d1",
                                            raw: "'#d3e2d1'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#d1dcdd",
                                            raw: "'#d1dcdd'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#ead2d1",
                                            raw: "'#ead2d1'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#d3d3d1",
                                            raw: "'#d3d3d1'"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "fontcolor"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: "#49423a",
                                            raw: "'#49423a'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#9e9e9e",
                                            raw: "'#9e9e9e'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#49423a",
                                            raw: "'#49423a'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#333333",
                                            raw: "'#333333'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#49423a",
                                            raw: "'#49423a'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#49423a",
                                            raw: "'#49423a'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#49423a",
                                            raw: "'#49423a'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "#49423a",
                                            raw: "'#49423a'"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "bgname"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: "\u767d",
                                            raw: "'\u767d'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u591c",
                                            raw: "'\u591c'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u820a",
                                            raw: "'\u820a'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u8b77",
                                            raw: "'\u8b77'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u9752",
                                            raw: "'\u9752'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u85cd",
                                            raw: "'\u85cd'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u7c89",
                                            raw: "'\u7c89'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u7070",
                                            raw: "'\u7070'"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "fontsize"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: "0.875em",
                                            raw: "'0.875em'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "1em",
                                            raw: "'1em'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "1.125em",
                                            raw: "'1.125em'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "1.25em",
                                            raw: "'1.25em'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "1.5em",
                                            raw: "'1.5em'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "1.75em",
                                            raw: "'1.75em'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "2em",
                                            raw: "'2em'"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "fontname"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: "\u5c0f\u865f",
                                            raw: "'\u5c0f\u865f'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u4e2d\u865f",
                                            raw: "'\u4e2d\u865f'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u5927\u865f",
                                            raw: "'\u5927\u865f'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u8f03\u5927",
                                            raw: "'\u8f03\u5927'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u8d85\u5927",
                                            raw: "'\u8d85\u5927'"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pagemode"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: 0,
                                            raw: "0"
                                        },
                                        {
                                            type: "Literal",
                                            value: 1,
                                            raw: "1"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pagemname"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: "\u4e0a\u4e0b\u6ed1\u52d5",
                                            raw: "'\u4e0a\u4e0b\u6ed1\u52d5'"
                                        },
                                        {
                                            type: "Literal",
                                            value: "\u5de6\u53f3\u7ffb\u9801",
                                            raw: "'\u5de6\u53f3\u7ffb\u9801'"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "tipegold"
                                },
                                computed: False,
                                value: {
                                    type: "ArrayExpression",
                                    elements: [
                                        {
                                            type: "Literal",
                                            value: 20,
                                            raw: "20"
                                        },
                                        {
                                            type: "Literal",
                                            value: 50,
                                            raw: "50"
                                        },
                                        {
                                            type: "Literal",
                                            value: 100,
                                            raw: "100"
                                        },
                                        {
                                            type: "Literal",
                                            value: 200,
                                            raw: "200"
                                        },
                                        {
                                            type: "Literal",
                                            value: 500,
                                            raw: "500"
                                        },
                                        {
                                            type: "Literal",
                                            value: 1000,
                                            raw: "1000"
                                        }
                                    ]
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "colorid"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "fontid"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 2,
                                    raw: "2"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pagemid"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "ttimer"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    raw: "null"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "tiptime"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 3000,
                                    raw: "3000"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "contentid"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: "acontentl",
                                    raw: "'acontentl'"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pageid"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: "aread",
                                    raw: "'aread'"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "showtools"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: False,
                                    raw: "false"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "CallTools"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "ReadTools"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "showtools"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "CallHide"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "document"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "getElementById"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "toptools",
                                                                                    raw: "'toptools'"
                                                                                }
                                                                            ]
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "style"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "display"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "",
                                                                    raw: "''"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "document"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "getElementById"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "bottomtools",
                                                                                    raw: "'bottomtools'"
                                                                                }
                                                                            ]
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "style"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "display"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "",
                                                                    raw: "''"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "showtools"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: True,
                                                                    raw: "true"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "CallShow"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "id"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "CallHide"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Identifier",
                                                                        name: "id"
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "display"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "",
                                                        raw: "''"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "CallHide"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "UnaryExpression",
                                                    prefix: True,
                                                    operator: "!",
                                                    argument: {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "arguments"
                                                        },
                                                        property: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "document"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "getElementById"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "toptools",
                                                                                    raw: "'toptools'"
                                                                                }
                                                                            ]
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "style"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "display"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "none",
                                                                    raw: "'none'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "document"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "getElementById"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "bottomtools",
                                                                                    raw: "'bottomtools'"
                                                                                }
                                                                            ]
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "style"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "display"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "none",
                                                                    raw: "'none'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "showtools"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: False,
                                                                    raw: "false"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "readset",
                                                                        raw: "'readset'"
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "display"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "none",
                                                        raw: "'none'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "givetip",
                                                                        raw: "'givetip'"
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "display"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "none",
                                                        raw: "'none'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "readtip",
                                                                        raw: "'readtip'"
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "display"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "none",
                                                        raw: "'none'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "addreview",
                                                                        raw: "'addreview'"
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "display"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "none",
                                                        raw: "'none'"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "ContentClick"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "==",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "pagemid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "CallTools"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "ShowTip"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "str"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "document"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getElementById"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "readtip",
                                                                    raw: "'readtip'"
                                                                }
                                                            ]
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "innerHTML"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "str"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "CallHide"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "CallShow"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "readtip",
                                                            raw: "'readtip'"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "TipTimeout"
                                                        }
                                                    },
                                                    arguments: []
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "TipTimeout"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "ReadTools"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "ttimer"
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "clearTimeout"
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadTools"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "ttimer"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "ttimer"
                                                        }
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "setTimeout"
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "FunctionExpression",
                                                                expression: False,
                                                                isAsync: False,
                                                                params: [],
                                                                body: {
                                                                    type: "BlockStatement",
                                                                    body: [
                                                                        {
                                                                            type: "IfStatement",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: "==",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "CallExpression",
                                                                                            callee: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "document"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "getElementById"
                                                                                                }
                                                                                            },
                                                                                            arguments: [
                                                                                                {
                                                                                                    type: "Literal",
                                                                                                    value: "readtip",
                                                                                                    raw: "'readtip'"
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "style"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "display"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: "",
                                                                                    raw: "''"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "BlockStatement",
                                                                                body: [
                                                                                    {
                                                                                        type: "ExpressionStatement",
                                                                                        expression: {
                                                                                            type: "CallExpression",
                                                                                            callee: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "ReadTools"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "CallHide"
                                                                                                }
                                                                                            },
                                                                                            arguments: [
                                                                                                {
                                                                                                    type: "Literal",
                                                                                                    value: 1,
                                                                                                    raw: "1"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                generator: False
                                                            },
                                                            {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadTools"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "tiptime"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "SetColor"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "id"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "pageid"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "backgroundColor"
                                                        }
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "bgcolor"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "pageid"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "color"
                                                        }
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "fontcolor"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "!=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "colorid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "Storage"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "set"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "read_colorid",
                                                                raw: "'read_colorid'"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "id"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "colorid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    }
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "lis"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "document"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "getElementById"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: "fontcolor",
                                                                            raw: "'fontcolor'"
                                                                        }
                                                                    ]
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getElementsByTagName"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "li",
                                                                    raw: "'li'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ForStatement",
                                                init: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                },
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "<",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "lis"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "length"
                                                        }
                                                    }
                                                },
                                                update: {
                                                    type: "UpdateExpression",
                                                    operator: "++",
                                                    argument: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    prefix: False
                                                },
                                                body: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "==",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "id"
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: True,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "lis"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "i"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "className"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "selected",
                                                                        raw: "'selected'"
                                                                    }
                                                                }
                                                            },
                                                            alternate: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: True,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "lis"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "i"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "className"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "",
                                                                        raw: "''"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "SetFont"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "id"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "document"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "getElementById"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "contentid"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "style"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "fontSize"
                                                        }
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "fontsize"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "!=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "fontid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "Storage"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "set"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "read_fontid",
                                                                raw: "'read_fontid'"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "id"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "fontid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "usePageMode"
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "==",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "pagemid"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadPages"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "MakePages"
                                                            }
                                                        },
                                                        arguments: []
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "FontSmall"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: ">",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "fontid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "SetFont"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "-",
                                                                        left: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "ReadTools"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "fontid"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "FontBig"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "<",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "fontid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "-",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadTools"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "fontsize"
                                                                }
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "SetFont"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "ReadTools"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "fontid"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "SetPagem"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "id"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "usePageMode"
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "!=",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "pagemid"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "!=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "pagemid"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "id"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "Storage"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "set"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: "read_pagemid",
                                                                            raw: "'read_pagemid'"
                                                                        },
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "id"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "pagemid"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "id"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "lis"
                                                                    },
                                                                    init: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "document"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "getElementById"
                                                                                    }
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "Literal",
                                                                                        value: "pagemode",
                                                                                        raw: "'pagemode'"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "getElementsByTagName"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "Literal",
                                                                                value: "li",
                                                                                raw: "'li'"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ForStatement",
                                                            init: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 0,
                                                                    raw: "0"
                                                                }
                                                            },
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "<",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                right: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "lis"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "length"
                                                                    }
                                                                }
                                                            },
                                                            update: {
                                                                type: "UpdateExpression",
                                                                operator: "++",
                                                                argument: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                prefix: False
                                                            },
                                                            body: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: "==",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "id"
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "i"
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "AssignmentExpression",
                                                                                operator: "=",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: True,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "lis"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "i"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "className"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: "selected",
                                                                                    raw: "'selected'"
                                                                                }
                                                                            }
                                                                        },
                                                                        alternate: {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "AssignmentExpression",
                                                                                operator: "=",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: True,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "lis"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "i"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "className"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: "",
                                                                                    raw: "''"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "==",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "pagemid"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 1,
                                                                    raw: "1"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "localStorage"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "setItem"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "\u7981\u7528\u7ae0\u8a55",
                                                                                    raw: "'\u7981\u7528\u7ae0\u8a55'"
                                                                                },
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "true",
                                                                                    raw: "'true'"
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "MakePages"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "VariableDeclaration",
                                                                        declarations: [
                                                                            {
                                                                                type: "VariableDeclarator",
                                                                                id: {
                                                                                    type: "Identifier",
                                                                                    name: "pinglunElement"
                                                                                },
                                                                                init: {
                                                                                    type: "CallExpression",
                                                                                    callee: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "document"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "getElementById"
                                                                                        }
                                                                                    },
                                                                                    arguments: [
                                                                                        {
                                                                                            type: "Literal",
                                                                                            value: "pinglun",
                                                                                            raw: "'pinglun'"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ],
                                                                        kind: "var"
                                                                    },
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "Identifier",
                                                                            name: "pinglunElement"
                                                                        },
                                                                        consequent: {
                                                                            type: "BlockStatement",
                                                                            body: [
                                                                                {
                                                                                    type: "ExpressionStatement",
                                                                                    expression: {
                                                                                        type: "AssignmentExpression",
                                                                                        operator: "=",
                                                                                        left: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "pinglunElement"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "style"
                                                                                                }
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "display"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "Literal",
                                                                                            value: "none",
                                                                                            raw: "'none'"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            alternate: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "localStorage"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "removeItem"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "\u7981\u7528\u7ae0\u8a55",
                                                                                    raw: "'\u7981\u7528\u7ae0\u8a55'"
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "RestorePages"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "VariableDeclaration",
                                                                        declarations: [
                                                                            {
                                                                                type: "VariableDeclarator",
                                                                                id: {
                                                                                    type: "Identifier",
                                                                                    name: "pinglunElement"
                                                                                },
                                                                                init: {
                                                                                    type: "CallExpression",
                                                                                    callee: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "document"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "getElementById"
                                                                                        }
                                                                                    },
                                                                                    arguments: [
                                                                                        {
                                                                                            type: "Literal",
                                                                                            value: "pinglun",
                                                                                            raw: "'pinglun'"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ],
                                                                        kind: "var"
                                                                    },
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "Identifier",
                                                                            name: "pinglunElement"
                                                                        },
                                                                        consequent: {
                                                                            type: "BlockStatement",
                                                                            body: [
                                                                                {
                                                                                    type: "ExpressionStatement",
                                                                                    expression: {
                                                                                        type: "AssignmentExpression",
                                                                                        operator: "=",
                                                                                        left: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "pinglunElement"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "style"
                                                                                                }
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "display"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "Literal",
                                                                                            value: "",
                                                                                            raw: "''"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "location"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "reload"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "CallHide"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "ahToggle"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "===",
                                                    left: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "localStorage"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "getItem"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "\u7981\u7528\u7ae0\u8a55",
                                                                raw: "'\u7981\u7528\u7ae0\u8a55'"
                                                            }
                                                        ]
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        raw: "null"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "localStorage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setItem"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "\u7981\u7528\u7ae0\u8a55",
                                                                        raw: "'\u7981\u7528\u7ae0\u8a55'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "true",
                                                                        raw: "'true'"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "location"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "reload"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "localStorage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "removeItem"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "\u7981\u7528\u7ae0\u8a55",
                                                                        raw: "'\u7981\u7528\u7ae0\u8a55'"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "location"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "reload"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "showimages"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "showImagesSetting"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "localStorage"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getItem"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "\u986f\u793a\u63d2\u5716",
                                                                    raw: "'\u986f\u793a\u63d2\u5716'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "hiddenImages"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "document"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getElementById"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "hidden-images",
                                                                    raw: "'hidden-images'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "===",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "showImagesSetting"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "true",
                                                        raw: "'true'"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "hiddenImages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "style"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "display"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "none",
                                                                    raw: "'none'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "localStorage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setItem"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "\u986f\u793a\u63d2\u5716",
                                                                        raw: "'\u986f\u793a\u63d2\u5716'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "false",
                                                                        raw: "'false'"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "location"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "reload"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "hiddenImages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "style"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "display"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "block",
                                                                    raw: "'block'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "localStorage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setItem"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "\u986f\u793a\u63d2\u5716",
                                                                        raw: "'\u986f\u793a\u63d2\u5716'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "true",
                                                                        raw: "'true'"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "location"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "reload"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "AddBookcase"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "jieqiUserInfo"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "jieqiUserId"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Ajax"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "Request"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: "+",
                                                                                left: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "+",
                                                                                    left: {
                                                                                        type: "BinaryExpression",
                                                                                        operator: "+",
                                                                                        left: {
                                                                                            type: "Literal",
                                                                                            value: "/modules/article/addbookcase.php?bid=",
                                                                                            raw: "'/modules/article/addbookcase.php?bid='"
                                                                                        },
                                                                                        right: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "ReadParams"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "articleid"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "Literal",
                                                                                        value: "&cid=",
                                                                                        raw: "'&cid='"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadParams"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "chapterid"
                                                                                    }
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "&pid=",
                                                                                raw: "'&pid='"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "ReadParams"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "page"
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ObjectExpression",
                                                                        properties: [
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "method"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "Literal",
                                                                                    value: "POST",
                                                                                    raw: "'POST'"
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            },
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "onComplete"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "FunctionExpression",
                                                                                    expression: False,
                                                                                    isAsync: False,
                                                                                    params: [],
                                                                                    body: {
                                                                                        type: "BlockStatement",
                                                                                        body: [
                                                                                            {
                                                                                                type: "ExpressionStatement",
                                                                                                expression: {
                                                                                                    type: "CallExpression",
                                                                                                    callee: {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ReadTools"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ShowTip"
                                                                                                        }
                                                                                                    },
                                                                                                    arguments: [
                                                                                                        {
                                                                                                            type: "MemberExpression",
                                                                                                            computed: False,
                                                                                                            object: {
                                                                                                                type: "ThisExpression"
                                                                                                            },
                                                                                                            property: {
                                                                                                                type: "Identifier",
                                                                                                                name: "response"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    generator: False
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "jumpurl"
                                                                    },
                                                                    init: {
                                                                        type: "ConditionalExpression",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">",
                                                                            left: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "window"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "location"
                                                                                            }
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "href"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "indexOf"
                                                                                    }
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "Literal",
                                                                                        value: "?",
                                                                                        raw: "'?'"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            right: {
                                                                                type: "UnaryExpression",
                                                                                prefix: True,
                                                                                operator: "-",
                                                                                argument: {
                                                                                    type: "Literal",
                                                                                    value: 1,
                                                                                    raw: "1"
                                                                                }
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "&before_act=addbookcase",
                                                                                raw: "'&before_act=addbookcase'"
                                                                            }
                                                                        },
                                                                        alternate: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "?before_act=addbookcase",
                                                                                raw: "'?before_act=addbookcase'"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "ShowLogin"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Identifier",
                                                                        name: "jumpurl"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "UserVote"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "jieqiUserInfo"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "jieqiUserId"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Ajax"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "Request"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "Literal",
                                                                            value: "/modules/article/uservote.php?id=",
                                                                            raw: "'/modules/article/uservote.php?id='"
                                                                        },
                                                                        right: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "ReadParams"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "articleid"
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ObjectExpression",
                                                                        properties: [
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "method"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "Literal",
                                                                                    value: "POST",
                                                                                    raw: "'POST'"
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            },
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "onComplete"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "FunctionExpression",
                                                                                    expression: False,
                                                                                    isAsync: False,
                                                                                    params: [],
                                                                                    body: {
                                                                                        type: "BlockStatement",
                                                                                        body: [
                                                                                            {
                                                                                                type: "ExpressionStatement",
                                                                                                expression: {
                                                                                                    type: "CallExpression",
                                                                                                    callee: {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ReadTools"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ShowTip"
                                                                                                        }
                                                                                                    },
                                                                                                    arguments: [
                                                                                                        {
                                                                                                            type: "MemberExpression",
                                                                                                            computed: False,
                                                                                                            object: {
                                                                                                                type: "ThisExpression"
                                                                                                            },
                                                                                                            property: {
                                                                                                                type: "Identifier",
                                                                                                                name: "response"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    generator: False
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "jumpurl"
                                                                    },
                                                                    init: {
                                                                        type: "ConditionalExpression",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">",
                                                                            left: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "window"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "location"
                                                                                            }
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "href"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "indexOf"
                                                                                    }
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "Literal",
                                                                                        value: "?",
                                                                                        raw: "'?'"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            right: {
                                                                                type: "UnaryExpression",
                                                                                prefix: True,
                                                                                operator: "-",
                                                                                argument: {
                                                                                    type: "Literal",
                                                                                    value: 1,
                                                                                    raw: "1"
                                                                                }
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "&before_act=uservote",
                                                                                raw: "'&before_act=uservote'"
                                                                            }
                                                                        },
                                                                        alternate: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "?before_act=uservote",
                                                                                raw: "'?before_act=uservote'"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "ShowLogin"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Identifier",
                                                                        name: "jumpurl"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "GiveTip"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "egold"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "jieqiUserInfo"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "jieqiUserId"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Ajax"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "Request"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "/modules/article/tip.php",
                                                                        raw: "'/modules/article/tip.php'"
                                                                    },
                                                                    {
                                                                        type: "ObjectExpression",
                                                                        properties: [
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "method"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "Literal",
                                                                                    value: "POST",
                                                                                    raw: "'POST'"
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            },
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "parameters"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "+",
                                                                                    left: {
                                                                                        type: "BinaryExpression",
                                                                                        operator: "+",
                                                                                        left: {
                                                                                            type: "BinaryExpression",
                                                                                            operator: "+",
                                                                                            left: {
                                                                                                type: "BinaryExpression",
                                                                                                operator: "+",
                                                                                                left: {
                                                                                                    type: "BinaryExpression",
                                                                                                    operator: "+",
                                                                                                    left: {
                                                                                                        type: "Literal",
                                                                                                        value: "act=post&id=",
                                                                                                        raw: "'act=post&id='"
                                                                                                    },
                                                                                                    right: {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ReadParams"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "articleid"
                                                                                                        }
                                                                                                    }
                                                                                                },
                                                                                                right: {
                                                                                                    type: "Literal",
                                                                                                    value: "&payegold=",
                                                                                                    raw: "'&payegold='"
                                                                                                }
                                                                                            },
                                                                                            right: {
                                                                                                type: "CallExpression",
                                                                                                callee: {
                                                                                                    type: "Identifier",
                                                                                                    name: "parseInt"
                                                                                                },
                                                                                                arguments: [
                                                                                                    {
                                                                                                        type: "Identifier",
                                                                                                        name: "egold"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "Literal",
                                                                                            value: "&jieqi_token=",
                                                                                            raw: "'&jieqi_token='"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "jieqiUserInfo"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "jieqiUserToken"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            },
                                                                            {
                                                                                type: "Property",
                                                                                key: {
                                                                                    type: "Identifier",
                                                                                    name: "onComplete"
                                                                                },
                                                                                computed: False,
                                                                                value: {
                                                                                    type: "FunctionExpression",
                                                                                    expression: False,
                                                                                    isAsync: False,
                                                                                    params: [],
                                                                                    body: {
                                                                                        type: "BlockStatement",
                                                                                        body: [
                                                                                            {
                                                                                                type: "ExpressionStatement",
                                                                                                expression: {
                                                                                                    type: "CallExpression",
                                                                                                    callee: {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ReadTools"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "ShowTip"
                                                                                                        }
                                                                                                    },
                                                                                                    arguments: [
                                                                                                        {
                                                                                                            type: "MemberExpression",
                                                                                                            computed: False,
                                                                                                            object: {
                                                                                                                type: "ThisExpression"
                                                                                                            },
                                                                                                            property: {
                                                                                                                type: "Identifier",
                                                                                                                name: "response"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    generator: False
                                                                                },
                                                                                kind: "init",
                                                                                method: False,
                                                                                shorthand: False
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "jumpurl"
                                                                    },
                                                                    init: {
                                                                        type: "ConditionalExpression",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">",
                                                                            left: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "window"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "location"
                                                                                            }
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "href"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "indexOf"
                                                                                    }
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "Literal",
                                                                                        value: "?",
                                                                                        raw: "'?'"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            right: {
                                                                                type: "UnaryExpression",
                                                                                prefix: True,
                                                                                operator: "-",
                                                                                argument: {
                                                                                    type: "Literal",
                                                                                    value: 1,
                                                                                    raw: "1"
                                                                                }
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "&before_act=givetip",
                                                                                raw: "'&before_act=givetip'"
                                                                            }
                                                                        },
                                                                        alternate: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: "?before_act=givetip",
                                                                                raw: "'?before_act=givetip'"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadTools"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "ShowLogin"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Identifier",
                                                                        name: "jumpurl"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "Show"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "output"
                                                        },
                                                        init: {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "isdisplay"
                                                        },
                                                        init: {
                                                            type: "ConditionalExpression",
                                                            test: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadTools"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "showtools"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "Literal",
                                                                value: "",
                                                                raw: "''"
                                                            },
                                                            alternate: {
                                                                type: "Literal",
                                                                value: "none",
                                                                raw: "'none'"
                                                            }
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "Literal",
                                                                value: "<div id=\"toptools\" class=\"toptools cf\" style=\"display:",
                                                                raw: "'<div id=\"toptools\" class=\"toptools cf\" style=\"display:'"
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "isdisplay"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: ";\">\t\t<a href=\"javascript: window.location.href = ReadParams.url_index;\" class=\"iconfont fl\">&#xee69;</a>\t\t<a href=\"javascript: window.location.href = ReadParams.url_home;\" class=\"iconfont fr\">&#xee27;</a>\t\t<a href=\"javascript: ReadTools.CallShow('readset');\" class=\"iconfont fr\">&#xee26;</a>\t\t<!--<a href=\"javascript: ReadTools.CallShow('givetip');\" class=\"iconfont fr\">&#xee42;</a>-->\t\t<a href=\"/bookcase.php\" class=\"iconfont fr\">&#xee43;</a>\t\t<a href=\"javascript: ReadTools.AddBookcase();\" class=\"iconfont fr\">&#xee53;</a>\t\t<!--<a href=\"javascript: ReadTools.CallShow('addreview');\" class=\"iconfont fr\">&#xee3a;</a>-->\t\t<!--<a href=\"javascript: ReadTools.UserVote();\" class=\"iconfont fr\">&#xee5d;</a>--></div>",
                                                            raw: "';\">\\\n\t\t<a href=\"javascript: window.location.href = ReadParams.url_index;\" class=\"iconfont fl\">&#xee69;</a>\\\n\t\t<a href=\"javascript: window.location.href = ReadParams.url_home;\" class=\"iconfont fr\">&#xee27;</a>\\\n\t\t<a href=\"javascript: ReadTools.CallShow(\\'readset\\');\" class=\"iconfont fr\">&#xee26;</a>\\\n\t\t<!--<a href=\"javascript: ReadTools.CallShow(\\'givetip\\');\" class=\"iconfont fr\">&#xee42;</a>-->\\\n\t\t<a href=\"/bookcase.php\" class=\"iconfont fr\">&#xee43;</a>\\\n\t\t<a href=\"javascript: ReadTools.AddBookcase();\" class=\"iconfont fr\">&#xee53;</a>\\\n\t\t<!--<a href=\"javascript: ReadTools.CallShow(\\'addreview\\');\" class=\"iconfont fr\">&#xee3a;</a>-->\\\n\t\t<!--<a href=\"javascript: ReadTools.UserVote();\" class=\"iconfont fr\">&#xee5d;</a>-->\\\n</div>'"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "Literal",
                                                                value: "<div id=\"bottomtools\" class=\"bottomtools cf\" style=\"display:",
                                                                raw: "'<div id=\"bottomtools\" class=\"bottomtools cf\" style=\"display:'"
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "isdisplay"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: ";\">\t<!--<script>anra();</script>-->\t\t<div class=\"hairline-bottom\"><ul>\t<li onclick=\"window.location.href = ReadParams.url_previous;\"><p class=\"iconfont f_l\">&#xee68;</p><p>\u4e0a\u4e00\u9801</p></li>\t<li onclick=\"event.stopPropagation(); window.location.href = ReadParams.url_index;\"><p class=\"iconfont f_l\">&#xee32;</p><p>\u76ee\u9304</p></li>\t<li onclick=\"window.location.href = ReadParams.url_articleinfo;\"><p class=\"iconfont f_l\">&#xee50;</p><p>\u66f8\u9801</p></li>\t<li onclick=\"window.location.href = ReadParams.url_next;\"><p class=\"iconfont f_l\">&#xee67;</p><p>\u4e0b\u4e00\u9801</p></li>\t</ul></div></div>",
                                                            raw: "';\">\\\n\t<!--<script>anra();</script>-->\\\n\t\t<div class=\"hairline-bottom\"><ul>\\\n\t<li onclick=\"window.location.href = ReadParams.url_previous;\"><p class=\"iconfont f_l\">&#xee68;</p><p>\u4e0a\u4e00\u9801</p></li>\\\n\t<li onclick=\"event.stopPropagation(); window.location.href = ReadParams.url_index;\"><p class=\"iconfont f_l\">&#xee32;</p><p>\u76ee\u9304</p></li>\\\n\t<li onclick=\"window.location.href = ReadParams.url_articleinfo;\"><p class=\"iconfont f_l\">&#xee50;</p><p>\u66f8\u9801</p></li>\\\n\t<li onclick=\"window.location.href = ReadParams.url_next;\"><p class=\"iconfont f_l\">&#xee67;</p><p>\u4e0b\u4e00\u9801</p></li>\\\n\t</ul></div>\\\n</div>'"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "<div id=\"readset\" class=\"readset\" style=\"display:none;\">\t\t\t\t<div class=\"setblock\"><p>\u80cc\u666f</p>\t\t\t\t<ul id=\"fontcolor\" class=\"fontcolor cf\">",
                                                        raw: "'<div id=\"readset\" class=\"readset\" style=\"display:none;\">\\\n\t\t\t\t<div class=\"setblock\"><p>\u80cc\u666f</p>\\\n\t\t\t\t<ul id=\"fontcolor\" class=\"fontcolor cf\">'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ForStatement",
                                                init: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                },
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "<",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "bgcolor"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "length"
                                                        }
                                                    }
                                                },
                                                update: {
                                                    type: "UpdateExpression",
                                                    operator: "++",
                                                    argument: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    prefix: False
                                                },
                                                body: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "+=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "output"
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: " <li",
                                                                    raw: "' <li'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "==",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "ThisExpression"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "colorid"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "+=",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "output"
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: " class=\"selected\"",
                                                                        raw: "' class=\"selected\"'"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "+=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "output"
                                                                },
                                                                right: {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: "+",
                                                                                left: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "+",
                                                                                    left: {
                                                                                        type: "BinaryExpression",
                                                                                        operator: "+",
                                                                                        left: {
                                                                                            type: "BinaryExpression",
                                                                                            operator: "+",
                                                                                            left: {
                                                                                                type: "BinaryExpression",
                                                                                                operator: "+",
                                                                                                left: {
                                                                                                    type: "Literal",
                                                                                                    value: " style=\"background: ",
                                                                                                    raw: "' style=\"background: '"
                                                                                                },
                                                                                                right: {
                                                                                                    type: "MemberExpression",
                                                                                                    computed: True,
                                                                                                    object: {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "ThisExpression"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "bgcolor"
                                                                                                        }
                                                                                                    },
                                                                                                    property: {
                                                                                                        type: "Identifier",
                                                                                                        name: "i"
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            right: {
                                                                                                type: "Literal",
                                                                                                value: ";color: ",
                                                                                                raw: "';color: '"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "MemberExpression",
                                                                                            computed: True,
                                                                                            object: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "ThisExpression"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "fontcolor"
                                                                                                }
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "i"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "Literal",
                                                                                        value: "\" onclick=\"ReadTools.SetColor(",
                                                                                        raw: "'\" onclick=\"ReadTools.SetColor('"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Identifier",
                                                                                    name: "i"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: ")\">",
                                                                                raw: "')\">'"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "MemberExpression",
                                                                            computed: True,
                                                                            object: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "ThisExpression"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "bgname"
                                                                                }
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "i"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "</li>",
                                                                        raw: "'</li>'"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "</ul></div>\t\t\t\t<div class=\"setblock\"><p>\u5b57\u9ad4</p>\t\t\t\t<ul id=\"fontsize\" class=\"fontsize cf\">",
                                                        raw: "'</ul></div>\\\n\t\t\t\t<div class=\"setblock\"><p>\u5b57\u9ad4</p>\\\n\t\t\t\t<ul id=\"fontsize\" class=\"fontsize cf\">'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: " <li onclick=\"ReadTools.FontSmall()\">\u7e2e\u5c0f\u5b57\u9ad4</li>\t\t\t\t<li onclick=\"ReadTools.FontBig()\">\u653e\u5927\u5b57\u9ad4</li>",
                                                        raw: "' <li onclick=\"ReadTools.FontSmall()\">\u7e2e\u5c0f\u5b57\u9ad4</li>\\\n\t\t\t\t<li onclick=\"ReadTools.FontBig()\">\u653e\u5927\u5b57\u9ad4</li>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "Identifier",
                                                    name: "usePageMode"
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "+=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "output"
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "</ul></div>\t\t\t\t<div class=\"setblock\"><p>\u7ffb\u9801</p>\t\t\t\t<ul id=\"pagemode\" class=\"pagemode cf\">",
                                                                    raw: "'</ul></div>\\\n\t\t\t\t<div class=\"setblock\"><p>\u7ffb\u9801</p>\\\n\t\t\t\t<ul id=\"pagemode\" class=\"pagemode cf\">'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ForStatement",
                                                            init: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 0,
                                                                    raw: "0"
                                                                }
                                                            },
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "<",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                right: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "ThisExpression"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "pagemode"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "length"
                                                                    }
                                                                }
                                                            },
                                                            update: {
                                                                type: "UpdateExpression",
                                                                operator: "++",
                                                                argument: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                prefix: False
                                                            },
                                                            body: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "AssignmentExpression",
                                                                            operator: "+=",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "output"
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: " <li",
                                                                                raw: "' <li'"
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: "==",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "ThisExpression"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "pagemid"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "i"
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "AssignmentExpression",
                                                                                operator: "+=",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "output"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: " class=\"selected\"",
                                                                                    raw: "' class=\"selected\"'"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "AssignmentExpression",
                                                                            operator: "+=",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "output"
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "+",
                                                                                left: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "+",
                                                                                    left: {
                                                                                        type: "BinaryExpression",
                                                                                        operator: "+",
                                                                                        left: {
                                                                                            type: "BinaryExpression",
                                                                                            operator: "+",
                                                                                            left: {
                                                                                                type: "Literal",
                                                                                                value: " onclick=\"ReadTools.SetPagem(",
                                                                                                raw: "' onclick=\"ReadTools.SetPagem('"
                                                                                            },
                                                                                            right: {
                                                                                                type: "Identifier",
                                                                                                name: "i"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "Literal",
                                                                                            value: ")\">",
                                                                                            raw: "')\">'"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: True,
                                                                                        object: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "ThisExpression"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "pagemname"
                                                                                            }
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "i"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: "</li>",
                                                                                    raw: "'</li>'"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "</ul></div>\t\t\t\t<div class=\"setblock\"><p>\u7ae0\u8a55</p><ul id=\"nameless\" class=\"cf\">\t\t\t\t<li onclick=\"ReadTools.ahToggle()\">\u958b\u5553</li><li onclick=\"ReadTools.ahToggle()\">\u95dc\u9589</li>",
                                                        raw: "'</ul></div>\\\n\t\t\t\t<div class=\"setblock\"><p>\u7ae0\u8a55</p><ul id=\"nameless\" class=\"cf\">\\\n\t\t\t\t<li onclick=\"ReadTools.ahToggle()\">\u958b\u5553</li><li onclick=\"ReadTools.ahToggle()\">\u95dc\u9589</li>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "</ul></div>\t\t\t\t<div class=\"setblock\"><p><ruby>\u63d2\u5716<rt>(\u5c08\u9801)</rt></ruby></p><ul id=\"showimages\" class=\"cf\">\t\t\t\t<li onclick=\"ReadTools.showimages()\">\u5287\u900f</li><li onclick=\"ReadTools.showimages()\">\u96b1\u85cf</li>",
                                                        raw: "'</ul></div>\\\n\t\t\t\t<div class=\"setblock\"><p><ruby>\u63d2\u5716<rt>(\u5c08\u9801)</rt></ruby></p><ul id=\"showimages\" class=\"cf\">\\\n\t\t\t\t<li onclick=\"ReadTools.showimages()\">\u5287\u900f</li><li onclick=\"ReadTools.showimages()\">\u96b1\u85cf</li>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "</ul></div>\t\t</div>",
                                                        raw: "'</ul></div>\\\n\t\t</div>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "Literal",
                                                                value: "<div id=\"addreview\" class=\"addreview\" style=\"display:none;\"><form name=\"frmreview\" id=\"frmreview\" method=\"post\" action=\"/modules/article/reviews.php?aid=",
                                                                raw: "'<div id=\"addreview\" class=\"addreview\" style=\"display:none;\"><form name=\"frmreview\" id=\"frmreview\" method=\"post\" action=\"/modules/article/reviews.php?aid='"
                                                            },
                                                            right: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadParams"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "articleid"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: "\"><div><textarea class=\"textarea\" name=\"pcontent\" id=\"pcontent\" placeholder=\"\u66f8\u8a55\u611f\u60f3\" style=\"font-family:Verdana;font-size:16px;width:94%;height:4.5em;margin:0 auto 0.3em auto;\"></textarea></div>",
                                                            raw: "'\">\\\n<div><textarea class=\"textarea\" name=\"pcontent\" id=\"pcontent\" placeholder=\"\u66f8\u8a55\u611f\u60f3\" style=\"font-family:Verdana;font-size:16px;width:94%;height:4.5em;margin:0 auto 0.3em auto;\"></textarea></div>'"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "<input type=\"button\" name=\"Submit\" class=\"button\" value=\"\u767c\u8868\u66f8\u8a55\" style=\"cursor:pointer;\" onclick=\"Ajax.Request('frmreview',{onComplete:function(){ReadTools.ShowTip(this.response);}});\"><input type=\"hidden\" name=\"act\" id=\"act\" value=\"newpost\" /></form></div>",
                                                        raw: "'<input type=\"button\" name=\"Submit\" class=\"button\" value=\"\u767c\u8868\u66f8\u8a55\" style=\"cursor:pointer;\" onclick=\"Ajax.Request(\\'frmreview\\',{onComplete:function(){ReadTools.ShowTip(this.response);}});\">\\\n<input type=\"hidden\" name=\"act\" id=\"act\" value=\"newpost\" />\\\n</form></div>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "<div id=\"givetip\" class=\"givetip\" style=\"display:none;\">\t\t<dl>\t\t<dt>\u8acb\u9078\u64c7\u6253\u8cde\u91d1\u984d</dt>",
                                                        raw: "'<div id=\"givetip\" class=\"givetip\" style=\"display:none;\">\\\n\t\t<dl>\\\n\t\t<dt>\u8acb\u9078\u64c7\u6253\u8cde\u91d1\u984d</dt>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ForStatement",
                                                init: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                },
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "<",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "tipegold"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "length"
                                                        }
                                                    }
                                                },
                                                update: {
                                                    type: "UpdateExpression",
                                                    operator: "++",
                                                    argument: {
                                                        type: "Identifier",
                                                        name: "i"
                                                    },
                                                    prefix: False
                                                },
                                                body: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "+=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "output"
                                                                },
                                                                right: {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: "+",
                                                                                left: {
                                                                                    type: "Literal",
                                                                                    value: " <dd onclick=\"ReadTools.GiveTip(",
                                                                                    raw: "' <dd onclick=\"ReadTools.GiveTip('"
                                                                                },
                                                                                right: {
                                                                                    type: "MemberExpression",
                                                                                    computed: True,
                                                                                    object: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "ThisExpression"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "tipegold"
                                                                                        }
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "i"
                                                                                    }
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: ")\">",
                                                                                raw: "')\">'"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "MemberExpression",
                                                                            computed: True,
                                                                            object: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "ThisExpression"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "tipegold"
                                                                                }
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "i"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: " \u5e63</dd>",
                                                                        raw: "' \u5e63</dd>'"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "</dl>\t\t</div>",
                                                        raw: "'</dl>\\\n\t\t</div>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "+=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "output"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "<div id=\"readtip\" class=\"readtip\" style=\"display:none;\">\t\t</div>",
                                                        raw: "'<div id=\"readtip\" class=\"readtip\" style=\"display:none;\">\\\n\t\t</div>'"
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "document"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "write"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "output"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "SaveSet"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "Storage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "set"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "read_colorid",
                                                            raw: "'read_colorid'"
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "colorid"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "Storage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "set"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "read_fontid",
                                                            raw: "'read_fontid'"
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "fontid"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "Storage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "set"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "read_pagemid",
                                                            raw: "'read_pagemid'"
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "pagemid"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "LoadSet"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        init: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "ThisExpression"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "defaultColorid"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: ">=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "<",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "ThisExpression"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "bgcolor"
                                                                }
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "SetColor"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "id"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "parseInt"
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Storage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "get"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "read_colorid",
                                                                        raw: "'read_colorid'"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: ">=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "<",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "ThisExpression"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "bgcolor"
                                                                }
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "SetColor"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "id"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "parseInt"
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Storage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "get"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "read_fontid",
                                                                        raw: "'read_fontid'"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: ">=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "<",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "ThisExpression"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "fontsize"
                                                                }
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "SetFont"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "id"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "id"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "parseInt"
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Storage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "get"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "read_pagemid",
                                                                        raw: "'read_pagemid'"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: ">=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "<",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "id"
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "ThisExpression"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "pagemode"
                                                                }
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "SetPagem"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "id"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "nameless"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "document"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getElementById"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "nameless",
                                                                    raw: "'nameless'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "===",
                                                    left: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "localStorage"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "getItem"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "\u7981\u7528\u7ae0\u8a55",
                                                                raw: "'\u7981\u7528\u7ae0\u8a55'"
                                                            }
                                                        ]
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        raw: "null"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "nameless"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "children"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 0,
                                                                            raw: "0"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "className"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "selected",
                                                                    raw: "'selected'"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "nameless"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "children"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "className"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "selected",
                                                                    raw: "'selected'"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "showImagesSetting"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "localStorage"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getItem"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "\u986f\u793a\u63d2\u5716",
                                                                    raw: "'\u986f\u793a\u63d2\u5716'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "hiddenImages"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "document"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "getElementById"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "hidden-images",
                                                                    raw: "'hidden-images'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "===",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "showImagesSetting"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "true",
                                                        raw: "'true'"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "Identifier",
                                                                name: "hiddenImages"
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "hiddenImages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "style"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "display"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "block",
                                                                        raw: "'block'"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "showimages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "children"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 0,
                                                                            raw: "0"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "className"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "selected",
                                                                    raw: "'selected'"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "showimages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "children"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "className"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "",
                                                                    raw: "''"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "Identifier",
                                                                name: "hiddenImages"
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "hiddenImages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "style"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "display"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "none",
                                                                        raw: "'none'"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "showimages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "children"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 0,
                                                                            raw: "0"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "className"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "",
                                                                    raw: "''"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "showimages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "children"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "className"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "selected",
                                                                    raw: "'selected'"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "ShowLogin"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "jumpurl"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "ShowTip"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "Literal",
                                                                    value: "\u8acb\u9ede\u64ca <a class=\"fsl fwb\" href=\"/login.php?jumpurl=",
                                                                    raw: "'\u8acb\u9ede\u64ca <a class=\"fsl fwb\" href=\"/login.php?jumpurl='"
                                                                },
                                                                right: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "Identifier",
                                                                        name: "encodeURIComponent"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "jumpurl"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: "\">\u767b\u9304</a> \u5f8c\u4f7f\u7528\u672c\u529f\u80fd\uff01",
                                                                raw: "'\">\u767b\u9304</a> \u5f8c\u4f7f\u7528\u672c\u529f\u80fd\uff01'"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "GetQueryString"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "name"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "reg"
                                                        },
                                                        init: {
                                                            type: "NewExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "RegExp"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "Literal",
                                                                            value: "(^|&)",
                                                                            raw: "\"(^|&)\""
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "name"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "=([^&]*)(&|$)",
                                                                        raw: "\"=([^&]*)(&|$)\""
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "r"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "window"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "location"
                                                                                }
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "search"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "substr"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    ]
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "match"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Identifier",
                                                                    name: "reg"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "!=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "r"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        raw: "null"
                                                    }
                                                },
                                                consequent: {
                                                    type: "ReturnStatement",
                                                    argument: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "unescape"
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "MemberExpression",
                                                                computed: True,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "r"
                                                                },
                                                                property: {
                                                                    type: "Literal",
                                                                    value: 2,
                                                                    raw: "2"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ReturnStatement",
                                                argument: {
                                                    type: "Literal",
                                                    raw: "null"
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "DoBefore"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "before_act"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadTools"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "GetQueryString"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "before_act",
                                                                    raw: "'before_act'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "SwitchStatement",
                                                discriminant: {
                                                    type: "Identifier",
                                                    name: "before_act"
                                                },
                                                cases: [
                                                    {
                                                        type: "SwitchCase",
                                                        test: {
                                                            type: "Literal",
                                                            value: "addbookcase",
                                                            raw: "'addbookcase'"
                                                        },
                                                        consequent: [
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "CallTools"
                                                                        }
                                                                    },
                                                                    arguments: []
                                                                }
                                                            },
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "ShowTip"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: "\u767b\u9304\u6210\u529f\uff0c\u8acb\u91cd\u65b0\u9ede\u64ca\u6536\u85cf\uff01",
                                                                            raw: "'\u767b\u9304\u6210\u529f\uff0c\u8acb\u91cd\u65b0\u9ede\u64ca\u6536\u85cf\uff01'"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                type: "BreakStatement"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        type: "SwitchCase",
                                                        test: {
                                                            type: "Literal",
                                                            value: "uservote",
                                                            raw: "'uservote'"
                                                        },
                                                        consequent: [
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "CallTools"
                                                                        }
                                                                    },
                                                                    arguments: []
                                                                }
                                                            },
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "ShowTip"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: "\u767b\u9304\u6210\u529f\uff0c\u8acb\u91cd\u65b0\u9ede\u64ca\u63a8\u85a6\uff01",
                                                                            raw: "'\u767b\u9304\u6210\u529f\uff0c\u8acb\u91cd\u65b0\u9ede\u64ca\u63a8\u85a6\uff01'"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                type: "BreakStatement"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        type: "SwitchCase",
                                                        test: {
                                                            type: "Literal",
                                                            value: "givetip",
                                                            raw: "'givetip'"
                                                        },
                                                        consequent: [
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "CallTools"
                                                                        }
                                                                    },
                                                                    arguments: []
                                                                }
                                                            },
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadTools"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "ShowTip"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: "\u767b\u9304\u6210\u529f\uff0c\u8acb\u91cd\u65b0\u9ede\u64ca\u6253\u8cde\uff01",
                                                                            raw: "'\u767b\u9304\u6210\u529f\uff0c\u8acb\u91cd\u65b0\u9ede\u64ca\u6253\u8cde\uff01'"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                type: "BreakStatement"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            }
                        ]
                    }
                }
            ],
            kind: "var"
        },
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "ReadPages"
                    },
                    init: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "totalPages"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "currentPage"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pageWidth"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pageHeight"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pageGapX"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "pageGapY"
                                },
                                computed: False,
                                value: {
                                    type: "Literal",
                                    value: 20,
                                    raw: "20"
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "hideTip"
                                },
                                computed: False,
                                value: {
                                    type: "UnaryExpression",
                                    prefix: True,
                                    operator: "-",
                                    argument: {
                                        type: "Literal",
                                        value: 1,
                                        raw: "1"
                                    }
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "PageClick"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "==",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "pagemid"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                        raw: "1"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "e"
                                                                    },
                                                                    init: {
                                                                        type: "ConditionalExpression",
                                                                        test: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "window"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "event"
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "window"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "event"
                                                                            }
                                                                        },
                                                                        alternate: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "Identifier",
                                                                                name: "getEvent"
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "clientWidth"
                                                                    },
                                                                    init: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "document"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "documentElement"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "clientWidth"
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "pageWidth"
                                                                    },
                                                                    init: {
                                                                        type: "ConditionalExpression",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "clientWidth"
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "maxWidth"
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "Identifier",
                                                                            name: "maxWidth"
                                                                        },
                                                                        alternate: {
                                                                            type: "Identifier",
                                                                            name: "clientWidth"
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "margin"
                                                                    },
                                                                    init: {
                                                                        type: "BinaryExpression",
                                                                        operator: "/",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "-",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "clientWidth"
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "pageWidth"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: 2,
                                                                            raw: "2"
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "adjustedClickX"
                                                                    },
                                                                    init: {
                                                                        type: "BinaryExpression",
                                                                        operator: "-",
                                                                        left: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "e"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "clientX"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "margin"
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "<",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "adjustedClickX"
                                                                },
                                                                right: {
                                                                    type: "BinaryExpression",
                                                                    operator: "*",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "pageWidth"
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: 0.333,
                                                                        raw: "0.333"
                                                                    }
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "ShowPage"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Literal",
                                                                                    value: "previous",
                                                                                    raw: "'previous'"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            alternate: {
                                                                type: "IfStatement",
                                                                test: {
                                                                    type: "BinaryExpression",
                                                                    operator: ">",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "adjustedClickX"
                                                                    },
                                                                    right: {
                                                                        type: "BinaryExpression",
                                                                        operator: "*",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "pageWidth"
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: 0.666,
                                                                            raw: "0.666"
                                                                        }
                                                                    }
                                                                },
                                                                consequent: {
                                                                    type: "BlockStatement",
                                                                    body: [
                                                                        {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "ShowPage"
                                                                                    }
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "Literal",
                                                                                        value: "next",
                                                                                        raw: "'next'"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                alternate: {
                                                                    type: "BlockStatement",
                                                                    body: [
                                                                        {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadTools"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "CallTools"
                                                                                    }
                                                                                },
                                                                                arguments: []
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "RestorePages"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "footlink"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "footlink",
                                                                    raw: "'footlink'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "Identifier",
                                                    name: "footlink"
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "footlink"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "setStyle"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "display",
                                                                raw: "'display'"
                                                            },
                                                            {
                                                                type: "Literal",
                                                                value: "",
                                                                raw: "''"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "abox"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "abox",
                                                                    raw: "'abox'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "abox"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "overflow",
                                                            raw: "'overflow'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "abox"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "margin",
                                                            raw: "'margin'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "abox"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "width",
                                                            raw: "'width'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "abox"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "height",
                                                            raw: "'height'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "apage"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "apage",
                                                                    raw: "'apage'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "apage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "position",
                                                            raw: "'position'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "apage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "height",
                                                            raw: "'height'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "apage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "columnWidth",
                                                            raw: "'columnWidth'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: True,
                                                            raw: "true"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "apage"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "columnGap",
                                                            raw: "'columnGap'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: True,
                                                            raw: "true"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "toptext"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "toptext",
                                                                    raw: "'toptext'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "toptext"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "display",
                                                            raw: "'display'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "none",
                                                            raw: "'none'"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "bottomtext"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "bottomtext",
                                                                    raw: "'bottomtext'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "bottomtext"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "display",
                                                            raw: "'display'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "none",
                                                            raw: "'none'"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "MakePages"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "LogicalExpression",
                                                    operator: "&&",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "usePageMode"
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "==",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadTools"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "pagemid"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "clientWidth"
                                                                    },
                                                                    init: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "document"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "documentElement"
                                                                            }
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "clientWidth"
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "pageWidth"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "ConditionalExpression",
                                                                    test: {
                                                                        type: "BinaryExpression",
                                                                        operator: ">",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "clientWidth"
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "maxWidth"
                                                                        }
                                                                    },
                                                                    consequent: {
                                                                        type: "Identifier",
                                                                        name: "maxWidth"
                                                                    },
                                                                    alternate: {
                                                                        type: "Identifier",
                                                                        name: "clientWidth"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "pageHeight"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "document"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "documentElement"
                                                                        }
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "clientHeight"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "footlink"
                                                                    },
                                                                    init: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "Identifier",
                                                                            name: "$_"
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "Literal",
                                                                                value: "footlink",
                                                                                raw: "'footlink'"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "Identifier",
                                                                name: "footlink"
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "footlink"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "setStyle"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Literal",
                                                                            value: "display",
                                                                            raw: "'display'"
                                                                        },
                                                                        {
                                                                            type: "Literal",
                                                                            value: "none",
                                                                            raw: "'none'"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "abox"
                                                                    },
                                                                    init: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "Identifier",
                                                                            name: "$_"
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "Literal",
                                                                                value: "abox",
                                                                                raw: "'abox'"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "abox"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "overflow",
                                                                        raw: "'overflow'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "hidden",
                                                                        raw: "'hidden'"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "abox"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "margin",
                                                                        raw: "'margin'"
                                                                    },
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: "+",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "pageGapY"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: "px ",
                                                                                    raw: "'px '"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "/",
                                                                                left: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: "Identifier",
                                                                                        name: "clientWidth"
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "ReadPages"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "pageWidth"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 2,
                                                                                    raw: "2"
                                                                                }
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: "px",
                                                                            raw: "'px'"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "abox"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "width",
                                                                        raw: "'width'"
                                                                    },
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "ReadPages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "pageWidth"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: "px",
                                                                            raw: "'px'"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "abox"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "height",
                                                                        raw: "'height'"
                                                                    },
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "-",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "pageHeight"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "*",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "pageGapY"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 2,
                                                                                    raw: "2"
                                                                                }
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: "px",
                                                                            raw: "'px'"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "apage"
                                                                    },
                                                                    init: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "Identifier",
                                                                            name: "$_"
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "Literal",
                                                                                value: "apage",
                                                                                raw: "'apage'"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "apage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "position",
                                                                        raw: "'position'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "relative",
                                                                        raw: "'relative'"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "apage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "height",
                                                                        raw: "'height'"
                                                                    },
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "-",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "pageHeight"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "*",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "pageGapY"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 2,
                                                                                    raw: "2"
                                                                                }
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: "px",
                                                                            raw: "'px'"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "apage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "columnWidth",
                                                                        raw: "'columnWidth'"
                                                                    },
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "ReadPages"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "pageWidth"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: "px",
                                                                            raw: "'px'"
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: True,
                                                                        raw: "true"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "apage"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "columnGap",
                                                                        raw: "'columnGap'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "0",
                                                                        raw: "'0'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: True,
                                                                        raw: "true"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "VariableDeclaration",
                                                            declarations: [
                                                                {
                                                                    type: "VariableDeclarator",
                                                                    id: {
                                                                        type: "Identifier",
                                                                        name: "pagecount"
                                                                    },
                                                                    init: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "Math"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "ceil"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "BinaryExpression",
                                                                                operator: "/",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "apage"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "scrollWidth"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "apage"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "clientWidth"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ],
                                                            kind: "var"
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "!=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "totalPages"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "pagecount"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "currentPage"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: 1,
                                                                                raw: "1"
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "AssignmentExpression",
                                                                                operator: "=",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "currentPage"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "CallExpression",
                                                                                    callee: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "Math"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "floor"
                                                                                        }
                                                                                    },
                                                                                    arguments: [
                                                                                        {
                                                                                            type: "BinaryExpression",
                                                                                            operator: "/",
                                                                                            left: {
                                                                                                type: "BinaryExpression",
                                                                                                operator: "*",
                                                                                                left: {
                                                                                                    type: "Identifier",
                                                                                                    name: "pagecount"
                                                                                                },
                                                                                                right: {
                                                                                                    type: "MemberExpression",
                                                                                                    computed: False,
                                                                                                    object: {
                                                                                                        type: "Identifier",
                                                                                                        name: "ReadPages"
                                                                                                    },
                                                                                                    property: {
                                                                                                        type: "Identifier",
                                                                                                        name: "currentPage"
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            right: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "ReadPages"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "totalPages"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "AssignmentExpression",
                                                                            operator: "=",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "totalPages"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "pagecount"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "LogicalExpression",
                                                                operator: "&&",
                                                                left: {
                                                                    type: "BinaryExpression",
                                                                    operator: ">",
                                                                    left: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "window"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "location"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "href"
                                                                                }
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "indexOf"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "Literal",
                                                                                value: "#lastPage",
                                                                                raw: "'#lastPage'"
                                                                            }
                                                                        ]
                                                                    },
                                                                    right: {
                                                                        type: "UnaryExpression",
                                                                        prefix: True,
                                                                        operator: "-",
                                                                        argument: {
                                                                            type: "Literal",
                                                                            value: 1,
                                                                            raw: "1"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "BinaryExpression",
                                                                    operator: "==",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "currentPage"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: 0,
                                                                        raw: "0"
                                                                    }
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "currentPage"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "totalPages"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "<",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "currentPage"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 1,
                                                                    raw: "1"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "currentPage"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: 1,
                                                                        raw: "1"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: ">",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "currentPage"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "totalPages"
                                                                    }
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "currentPage"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "totalPages"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "ShowPage"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        },
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "<",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "hideTip"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 0,
                                                                    raw: "0"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "AssignmentExpression",
                                                                            operator: "=",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "hideTip"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "Identifier",
                                                                                    name: "parseInt"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "CallExpression",
                                                                                        callee: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "Storage"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "get"
                                                                                            }
                                                                                        },
                                                                                        arguments: [
                                                                                            {
                                                                                                type: "Literal",
                                                                                                value: "read_hidetip",
                                                                                                raw: "'read_hidetip'"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: "!=",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "hideTip"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: 1,
                                                                                raw: "1"
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "BlockStatement",
                                                                            body: [
                                                                                {
                                                                                    type: "ExpressionStatement",
                                                                                    expression: {
                                                                                        type: "AssignmentExpression",
                                                                                        operator: "=",
                                                                                        left: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "CallExpression",
                                                                                                    callee: {
                                                                                                        type: "Identifier",
                                                                                                        name: "$_"
                                                                                                    },
                                                                                                    arguments: [
                                                                                                        {
                                                                                                            type: "Literal",
                                                                                                            value: "operatetip",
                                                                                                            raw: "'operatetip'"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "style"
                                                                                                }
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "display"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "Literal",
                                                                                            value: "",
                                                                                            raw: "''"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    type: "ExpressionStatement",
                                                                                    expression: {
                                                                                        type: "CallExpression",
                                                                                        callee: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "Storage"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "set"
                                                                                            }
                                                                                        },
                                                                                        arguments: [
                                                                                            {
                                                                                                type: "Literal",
                                                                                                value: "read_hidetip",
                                                                                                raw: "'read_hidetip'"
                                                                                            },
                                                                                            {
                                                                                                type: "Literal",
                                                                                                value: "1",
                                                                                                raw: "'1'"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "ShowPage"
                                },
                                computed: False,
                                value: {
                                    type: "FunctionExpression",
                                    expression: False,
                                    isAsync: False,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "MemberExpression",
                                                    computed: True,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "arguments"
                                                    },
                                                    property: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "==",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: True,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "arguments"
                                                                    },
                                                                    property: {
                                                                        type: "Literal",
                                                                        value: 0,
                                                                        raw: "0"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "next",
                                                                    raw: "'next'"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "BlockStatement",
                                                                body: [
                                                                    {
                                                                        type: "ExpressionStatement",
                                                                        expression: {
                                                                            type: "UpdateExpression",
                                                                            operator: "++",
                                                                            argument: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "currentPage"
                                                                                }
                                                                            },
                                                                            prefix: False
                                                                        }
                                                                    },
                                                                    {
                                                                        type: "IfStatement",
                                                                        test: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "currentPage"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "totalPages"
                                                                                }
                                                                            }
                                                                        },
                                                                        consequent: {
                                                                            type: "BlockStatement",
                                                                            body: [
                                                                                {
                                                                                    type: "ExpressionStatement",
                                                                                    expression: {
                                                                                        type: "AssignmentExpression",
                                                                                        operator: "=",
                                                                                        left: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "document"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "location"
                                                                                                }
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "href"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "ReadParams"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "url_next"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    type: "ReturnStatement",
                                                                                    argument: {
                                                                                        type: "Literal",
                                                                                        value: True,
                                                                                        raw: "true"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            alternate: {
                                                                type: "IfStatement",
                                                                test: {
                                                                    type: "BinaryExpression",
                                                                    operator: "==",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: True,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "arguments"
                                                                        },
                                                                        property: {
                                                                            type: "Literal",
                                                                            value: 0,
                                                                            raw: "0"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: "previous",
                                                                        raw: "'previous'"
                                                                    }
                                                                },
                                                                consequent: {
                                                                    type: "BlockStatement",
                                                                    body: [
                                                                        {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "UpdateExpression",
                                                                                operator: "--",
                                                                                argument: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "currentPage"
                                                                                    }
                                                                                },
                                                                                prefix: False
                                                                            }
                                                                        },
                                                                        {
                                                                            type: "IfStatement",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: "<",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "currentPage"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 1,
                                                                                    raw: "1"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "BlockStatement",
                                                                                body: [
                                                                                    {
                                                                                        type: "ExpressionStatement",
                                                                                        expression: {
                                                                                            type: "AssignmentExpression",
                                                                                            operator: "=",
                                                                                            left: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "MemberExpression",
                                                                                                    computed: False,
                                                                                                    object: {
                                                                                                        type: "Identifier",
                                                                                                        name: "document"
                                                                                                    },
                                                                                                    property: {
                                                                                                        type: "Identifier",
                                                                                                        name: "location"
                                                                                                    }
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "href"
                                                                                                }
                                                                                            },
                                                                                            right: {
                                                                                                type: "BinaryExpression",
                                                                                                operator: "+",
                                                                                                left: {
                                                                                                    type: "MemberExpression",
                                                                                                    computed: False,
                                                                                                    object: {
                                                                                                        type: "Identifier",
                                                                                                        name: "ReadParams"
                                                                                                    },
                                                                                                    property: {
                                                                                                        type: "Identifier",
                                                                                                        name: "url_previous"
                                                                                                    }
                                                                                                },
                                                                                                right: {
                                                                                                    type: "Literal",
                                                                                                    value: "#lastPage",
                                                                                                    raw: "'#lastPage'"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        type: "ReturnStatement",
                                                                                        argument: {
                                                                                            type: "Literal",
                                                                                            value: True,
                                                                                            raw: "true"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "pagecount"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "Math"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "ceil"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "BinaryExpression",
                                                                    operator: "/",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "apage"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "scrollWidth"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "apage"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "clientWidth"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "!=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadPages"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "totalPages"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "pagecount"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "IfStatement",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: ">",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "currentPage"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 1,
                                                                    raw: "1"
                                                                }
                                                            },
                                                            consequent: {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "AssignmentExpression",
                                                                    operator: "=",
                                                                    left: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "ReadPages"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "currentPage"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "Math"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "floor"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "BinaryExpression",
                                                                                operator: "/",
                                                                                left: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "*",
                                                                                    left: {
                                                                                        type: "Identifier",
                                                                                        name: "pagecount"
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "ReadPages"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "currentPage"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "totalPages"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "ReadPages"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "totalPages"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "pagecount"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "<",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadPages"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "currentPage"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                        raw: "1"
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadPages"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "currentPage"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: "1"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: ">",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadPages"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "currentPage"
                                                        }
                                                    },
                                                    right: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadPages"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "totalPages"
                                                        }
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadPages"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "currentPage"
                                                            }
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadPages"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "totalPages"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "==",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadPages"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "currentPage"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                        raw: "1"
                                                    }
                                                },
                                                consequent: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "apage"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "setStyle"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "left",
                                                                raw: "'left'"
                                                            },
                                                            {
                                                                type: "Literal",
                                                                value: "0",
                                                                raw: "'0'"
                                                            }
                                                        ]
                                                    }
                                                },
                                                alternate: {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "apage"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "setStyle"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: "left",
                                                                raw: "'left'"
                                                            },
                                                            {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "Literal",
                                                                        value: "-",
                                                                        raw: "'-'"
                                                                    },
                                                                    right: {
                                                                        type: "BinaryExpression",
                                                                        operator: "*",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "-",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "currentPage"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: 1,
                                                                                raw: "1"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "BinaryExpression",
                                                                            operator: "-",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "ReadPages"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "pageWidth"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "*",
                                                                                left: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "ReadPages"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "pageGapX"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 2,
                                                                                    raw: "2"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "px",
                                                                    raw: "'px'"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "toptext"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "toptext",
                                                                    raw: "'toptext'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: ">",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadPages"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "currentPage"
                                                        }
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                        raw: "1"
                                                    }
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "AssignmentExpression",
                                                                operator: "=",
                                                                left: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "toptext"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "innerHTML"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "Identifier",
                                                                            name: "$_"
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "Literal",
                                                                                value: "atitle",
                                                                                raw: "'atitle'"
                                                                            }
                                                                        ]
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "innerHTML"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "toptext"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "display",
                                                                        raw: "'display'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "",
                                                                        raw: "''"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                alternate: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "toptext"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "setStyle"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Literal",
                                                                        value: "display",
                                                                        raw: "'display'"
                                                                    },
                                                                    {
                                                                        type: "Literal",
                                                                        value: "none",
                                                                        raw: "'none'"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "bottomtext"
                                                        },
                                                        init: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "$_"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "bottomtext",
                                                                    raw: "'bottomtext'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "bottomtext"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "textContent"
                                                        }
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "ReadPages"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "currentPage"
                                                                }
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: "/",
                                                                raw: "'/'"
                                                            }
                                                        },
                                                        right: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "ReadPages"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "totalPages"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "bottomtext"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "setStyle"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "display",
                                                            raw: "'display'"
                                                        },
                                                        {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "''"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "event"
                                                        },
                                                        init: {
                                                            type: "NewExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "CustomEvent"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Literal",
                                                                    value: "lazybeforeunveil",
                                                                    raw: "\"lazybeforeunveil\""
                                                                },
                                                                {
                                                                    type: "ObjectExpression",
                                                                    properties: [
                                                                        {
                                                                            type: "Property",
                                                                            key: {
                                                                                type: "Identifier",
                                                                                name: "detail"
                                                                            },
                                                                            computed: False,
                                                                            value: {
                                                                                type: "ObjectExpression",
                                                                                properties: []
                                                                            },
                                                                            kind: "init",
                                                                            method: False,
                                                                            shorthand: False
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                kind: "var"
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "window"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "dispatchEvent"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "event"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    generator: False
                                },
                                kind: "init",
                                method: False,
                                shorthand: False
                            }
                        ]
                    }
                }
            ],
            kind: "var"
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "Identifier",
                        name: "window"
                    },
                    property: {
                        type: "Identifier",
                        name: "onload"
                    }
                },
                right: {
                    type: "FunctionExpression",
                    expression: False,
                    isAsync: False,
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "document"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "getElementById"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "ReadTools"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "pageid"
                                                        }
                                                    }
                                                ]
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "style"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "backgroundColor"
                                        }
                                    },
                                    right: {
                                        type: "MemberExpression",
                                        computed: True,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "ReadTools"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "bgcolor"
                                            }
                                        },
                                        property: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "ReadTools"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "defaultColorid"
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "ReadPages"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "MakePages"
                                        }
                                    },
                                    arguments: []
                                }
                            }
                        ]
                    },
                    generator: False
                }
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "Identifier",
                        name: "ReadTools"
                    },
                    property: {
                        type: "Identifier",
                        name: "Show"
                    }
                },
                arguments: []
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "Identifier",
                        name: "ReadTools"
                    },
                    property: {
                        type: "Identifier",
                        name: "LoadSet"
                    }
                },
                arguments: []
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "Identifier",
                        name: "ReadTools"
                    },
                    property: {
                        type: "Identifier",
                        name: "DoBefore"
                    }
                },
                arguments: []
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "addEvent"
                },
                arguments: [
                    {
                        type: "Identifier",
                        name: "window"
                    },
                    {
                        type: "Literal",
                        value: "load",
                        raw: "'load'"
                    },
                    {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "ReadPages"
                        },
                        property: {
                            type: "Identifier",
                            name: "MakePages"
                        }
                    }
                ]
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "addEvent"
                },
                arguments: [
                    {
                        type: "Identifier",
                        name: "window"
                    },
                    {
                        type: "Literal",
                        value: "resize",
                        raw: "'resize'"
                    },
                    {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "ReadPages"
                        },
                        property: {
                            type: "Identifier",
                            name: "MakePages"
                        }
                    }
                ]
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "document"
                            },
                            property: {
                                type: "Identifier",
                                name: "getElementById"
                            }
                        },
                        arguments: [
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "ReadTools"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "pageid"
                                }
                            }
                        ]
                    },
                    property: {
                        type: "Identifier",
                        name: "onclick"
                    }
                },
                right: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "Identifier",
                        name: "ReadPages"
                    },
                    property: {
                        type: "Identifier",
                        name: "PageClick"
                    }
                }
            }
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "document"
                            },
                            property: {
                                type: "Identifier",
                                name: "getElementById"
                            }
                        },
                        arguments: [
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "ReadTools"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "contentid"
                                }
                            }
                        ]
                    },
                    property: {
                        type: "Identifier",
                        name: "onclick"
                    }
                },
                right: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "Identifier",
                        name: "ReadTools"
                    },
                    property: {
                        type: "Identifier",
                        name: "ContentClick"
                    }
                }
            }
        }
    ]
}